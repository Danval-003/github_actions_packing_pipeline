name: Release Python Package

on:
  push:
    branches: [main, master]
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.12.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.10"

      - name: Configure git identity (para semantic-release)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Install base deps (requirements.txt)
        if: hashFiles('requirements.txt') != ''
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install build & release tooling
        run: |
          pip install --upgrade build twine python-semantic-release

      # (Opcional pero útil si tu README podría no ser UTF-8)
      - name: Normalize README encoding to UTF-8 (CI patch)
        run: |
          python - << 'PY'
import pathlib, sys
p = pathlib.Path("README.md")
if p.exists():
    b = p.read_bytes()
    if b[:2] in (b'\xff\xfe', b'\xfe\xff'):
        try:
            txt = b.decode('utf-16')
            p.write_text(txt, encoding='utf-8')
            print("Converted README.md from UTF-16 to UTF-8")
        except Exception as e:
            print("WARN: could not auto-convert README:", e, file=sys.stderr)
PY

      - name: Ensure CHANGELOG exists (optional)
        run: |
          [ -f CHANGELOG.md ] || touch CHANGELOG.md

      - name: Bump version & tag (semantic-release)
        id: semver
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release version
          TAG="$(git describe --tags --abbrev=0)"
          echo "TAG=$TAG" >> $GITHUB_ENV
          VERSION="${TAG#v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build distribution
        run: |
          rm -rf dist/
          python -m build

      - name: Preflight: check PyPI/TestPyPI tokens present
        run: |
          [ -n "${PYPI_API_TOKEN}" ] || (echo "ERROR: PYPI_API_TOKEN is missing" && exit 1)
          [ -n "${TEST_PYPI_API_TOKEN}" ] || (echo "ERROR: TEST_PYPI_API_TOKEN is missing" && exit 1)

      - name: Upload to PyPI (Twine + token)
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ env.PYPI_API_TOKEN }}
        run: |
          python -m twine upload --non-interactive --verbose dist/*

      - name: Upload to TestPyPI (Twine + token)
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ env.TEST_PYPI_API_TOKEN }}
        run: |
          python -m twine upload --repository-url https://test.pypi.org/legacy/ --non-interactive --verbose dist/*

      - name: Create GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          files: |
            dist/*.whl
            dist/*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
